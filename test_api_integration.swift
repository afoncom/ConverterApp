#!/usr/bin/swift

/*
 * –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Currency-Server API
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: cd Backend && swift run CurrencyServer serve --hostname localhost --port 8080
 * 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç: swift test_api_integration.swift
 */

import Foundation

// –ú–æ–¥–µ–ª—å –¥–ª—è API –æ—Ç–≤–µ—Ç–∞
struct APIResponse: Codable {
    let uuid: String
    let name: String
    let rate: Double
}

func testAPIIntegration() {
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Currency-Server API...")
    
    guard let url = URL(string: "http://localhost:8080/v1/getRates") else {
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL")
        return
    }
    
    let semaphore = DispatchSemaphore(value: 0)
    
    let task = URLSession.shared.dataTask(with: url) { data, response, error in
        defer { semaphore.signal() }
        
        if let error = error {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)")
            return
        }
        
        guard let data = data else {
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
            return
        }
        
        print("üì° –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (\(data.count) –±–∞–π—Ç)")
        
        do {
            let apiResponses = try JSONDecoder().decode([APIResponse].self, from: data)
            
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ \(apiResponses.count) –≤–∞–ª—é—Ç:")
            
            for response in apiResponses {
                print("   üí∞ \(response.name): \(response.rate) (UUID: \(response.uuid.prefix(8))...)")
            }
            
            print("\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: \(error)")
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if let rawString = String(data: data, encoding: .utf8) {
                print("üìù –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
                print(rawString.prefix(200))
            }
        }
    }
    
    task.resume()
    semaphore.wait()
}

// MARK: - Main Execution

print("=== –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Currency-Server API ===")
print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8080")
print()

testAPIIntegration()

print()
print("=== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ===")